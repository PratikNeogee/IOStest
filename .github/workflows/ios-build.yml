name: iOS App CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Create iOS Project
      run: |
        echo "ðŸ“± Creating new iOS project..."
        mkdir -p MyApp
        cd MyApp
        
        # Create a basic iOS project structure
        cat > Package.swift << 'EOF'
        // swift-tools-version: 5.9
        import PackageDescription
        
        let package = Package(
            name: "MyApp",
            platforms: [.iOS(.v15)],
            products: [
                .library(name: "MyApp", targets: ["MyApp"])
            ],
            targets: [
                .target(name: "MyApp"),
                .testTarget(name: "MyAppTests", dependencies: ["MyApp"])
            ]
        )
        EOF
        
        # Create source files
        mkdir -p Sources/MyApp
        cat > Sources/MyApp/ContentView.swift << 'EOF'
        import SwiftUI
        
        public struct ContentView: View {
            public init() {}
            
            public var body: some View {
                VStack {
                    Text("Hello, iOS!")
                        .font(.largeTitle)
                        .foregroundColor(.blue)
                    
                    Button("Tap Me") {
                        print("Button tapped!")
                    }
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
                }
                .padding()
            }
        }
        EOF
        
        # Create test file
        mkdir -p Tests/MyAppTests
        cat > Tests/MyAppTests/MyAppTests.swift << 'EOF'
        import XCTest
        @testable import MyApp
        
        final class MyAppTests: XCTestCase {
            func testExample() {
                // Simple test to verify the module loads
                let view = ContentView()
                XCTAssertNotNil(view)
            }
        }
        EOF
        
    - name: Build Swift Package
      run: |
        cd MyApp
        echo "ðŸ”¨ Building Swift package..."
        swift build -v
        
    - name: Run Tests
      run: |
        cd MyApp
        echo "ðŸ§ª Running tests..."
        swift test -v
        
    - name: Build for iOS Simulator
      run: |
        cd MyApp
        echo "ðŸ“± Building for iOS Simulator..."
        swift build -v --destination generic/platform=iOS\ Simulator
        
    - name: Test on iOS Simulator
      run: |
        echo "ðŸš€ Testing on iOS Simulator..."
        
        # Start simulator
        SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone 15 Pro (" | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
        
        if [ ! -z "$SIMULATOR_ID" ]; then
          xcrun simctl boot "$SIMULATOR_ID"
          sleep 10
          
          echo "âœ… Simulator booted successfully: $SIMULATOR_ID"
          
          # You could run UI tests here
          echo "ðŸ“Š Simulator is ready for UI testing"
          
          xcrun simctl shutdown "$SIMULATOR_ID"
        fi
        
    - name: Build Summary
      run: |
        echo "ðŸ“Š Build Summary:"
        echo "================"
        echo "âœ… Swift Package: Built successfully"
        echo "âœ… Unit Tests: Passed"
        echo "âœ… iOS Simulator: Compatible"
        echo "âœ… CI/CD Pipeline: Working"
